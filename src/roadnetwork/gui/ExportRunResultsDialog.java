/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package roadnetwork.gui;

import java.sql.SQLRecoverableException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import roadnetwork.controllers.ExportRunResultsController;
import roadnetwork.domain.ImportedResult;
import roadnetwork.domain.ImportedResultSingleTrafficPattern;
import roadnetwork.domain.TrafficPattern;

/**
 *
 * @author josemiranda
 */
public class ExportRunResultsDialog extends javax.swing.JDialog {

    private MainFrame m_ancestor;
    private ExportRunResultsController m_exportRunResultsController;
    private ArrayList<String> m_simulationRuns;
    private ArrayList<ImportedResult> m_importedResult;
    private String m_selecetedRun;
    private ImportedResult m_selectedResultType;

    /**
     * Creates new form ExportRunResultsDialog
     */
    public ExportRunResultsDialog(MainFrame mainFrame, boolean modal) {
        super(mainFrame, modal);
        m_ancestor = mainFrame;
        m_exportRunResultsController = new ExportRunResultsController(mainFrame.getManager());
        run();
    }

    private void run() {
        try {
            int check = m_exportRunResultsController.canExport();
            if (check == -1) {
                JOptionPane.showMessageDialog(this, "Can't export run results. There is no active project.", "No active project", JOptionPane.INFORMATION_MESSAGE);
                setVisible(false);
            } else if (check == -2) {
                JOptionPane.showMessageDialog(this, "Can't export run results. There is no active simulation.", "No active simulation", JOptionPane.INFORMATION_MESSAGE);
                setVisible(false);
            } else if (check == -3) {
                JOptionPane.showMessageDialog(this, "Can't export run results. The current simulation isn't saved.", "Simulation not saved", JOptionPane.INFORMATION_MESSAGE);
                setVisible(false);
            } else if (check == -4) {
                JOptionPane.showMessageDialog(this, "Can't export run results. There are no runs saved.", "No runs saved", JOptionPane.INFORMATION_MESSAGE);
                setVisible(false);
            } else {
                m_simulationRuns = m_exportRunResultsController.getSimulationRuns();
                m_importedResult = m_exportRunResultsController.getImportedResultOptions();
                initComponents();
                setContentPane(new ExportRunResultsChooseRunPane(this, m_simulationRuns, m_importedResult));
                setLocationRelativeTo(null);
                setVisible(true);
            }

        } catch (SQLRecoverableException ex) {
            JOptionPane.showMessageDialog(this, "Error found while trying to connect to database. Please try again.", "Database Error", JOptionPane.ERROR_MESSAGE);
            Logger.getLogger(ExportRunResultsDialog.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private boolean exportResults(String fileName) {
        return m_exportRunResultsController.exportResults(fileName, m_selecetedRun, m_selectedResultType);
    }

    private void selectTrafficPattern() {
        ArrayList<TrafficPattern> tp = m_exportRunResultsController.getTrafficPatternsList();
        setContentPane(new ExportRunResultsChooseTPatternPane(this, tp));
        revalidate();
    }

    public void exportResultsSpecieficTP(String fileName, TrafficPattern tp) {
        boolean flag = m_exportRunResultsController.exportResults(fileName, m_selecetedRun, m_selectedResultType, tp);
        if (flag == true) {
            JOptionPane.showMessageDialog(this, "The selected run's results were correctly exported.", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Unnable to export the results.", "Error", JOptionPane.INFORMATION_MESSAGE);
        }

        dispose();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    void selectRunAndExportType(String run, ImportedResult impResult) {
        m_selecetedRun = run;
        m_selectedResultType = impResult;
        if (m_selectedResultType instanceof ImportedResultSingleTrafficPattern) {
            selectTrafficPattern();
        } else {
            boolean flag = exportResults("Simulation Detailed Results");
            if (flag == true) {
                JOptionPane.showMessageDialog(this, "The selected run's results were correctly exported.", "Success", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Unnable to export the results.", "Error", JOptionPane.INFORMATION_MESSAGE);
            }
            dispose();
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
